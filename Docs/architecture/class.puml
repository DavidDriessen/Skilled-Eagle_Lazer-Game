@startuml

class LCD <<boundery>> {
+test()
+push(data)
}
class IrSensor <<boundery>> {
+get()
}
class IrLed <<boundery>> {
+send(byte data[2])
}
class Button <<boundery>> {
+get()
}
class Speaker <<boundery>> {
+play(sound, duration)
}

class DisplayController <<controller>> {
-LCD dysplay
+setTime(int time)
+setScore(int scaore)
+setWapen(int wapen)
+setPlayerId(int id)
}
class IrReceiver <<controller>> {
-IrSensor ir
-RegisterController register
-InitController init
-GameController game
}
class IrSender <<controller>> {
-IrLed ir
+fire(byte data)
}
class ButtonController <<controller>> {
-Button btn
+setPlayerData(byte data[2])
+setWapen(wapen)
+disable()
+enable()
}
class SoundController <<controller>> {
+fire()
}

class PcProxy <<proxy>> {
-GameController game
}

class GameController <<controller>> {
-GameTimeController timer
-ButtonController btn
-score[]
-wapen
-gameMode

+startGame(int time)
+stopGame()

+setWapen(wapen)
+getWapen()
+setGameMode(mode)
+getGameMode()

+shot(score)
+disable()
+enable()
}
class GameTimeController <<controller>> {
-GameController game
-DisplayController display
+start(int time)
+stop()
}
class InitController <<controller>> {
-GameController game
}
class RegisterController <<controller>> {
-GameController game
}

enum Wapens <<entity>>
enum GameModes <<entity>>

LCD <-- DisplayController
IrSensor <-- IrReceiver
IrLed <-- IrSender
Button <- ButtonController
Speaker <-- SoundController

IrReceiver --> GameController
IrReceiver --> InitController
IrReceiver --> RegisterController

InitController --> GameController
RegisterController --> GameController

GameController <-> GameTimeController
DisplayController <-- GameTimeController
DisplayController <-- GameController

ButtonController <- GameController
IrSender <-- ButtonController
SoundController <-- ButtonController

GameController -->  Wapens
GameController --> GameModes
GameController <-- PcProxy

@enduml