@startuml

class LCD <<boundery>> {
+test()
+push(data)
}
class IrSensor <<boundery>> {
}
class IrLed <<boundery>> {
}
class Button <<boundery>> {
+get()
}
class Speaker <<boundery>> {
+play(sound, duration)
}

class PcProxy <<proxy>> {
}

class IrReceiver <<controller>> {
-dataToSend
+receive()
}
class IrSender <<controller>> {
-receivedData
+receive()
-decode()
}
class SoundController <<controller>> {
}
class DisplayController <<controller>> {
}
class ButtonController <<controller>> {
-getButton()
}
class GameController <<controller>> {
-score
-wapen
-gameMode
+addScore(score)
+setWapen(wapen)
+getWapen()
+setGameMode()
+getGameMode()
}
class GameTimeController <<controller>> {
+start()
+pause()
+resume()
+stop()
}

enum Wapens <<entity>>
enum GameModes <<entity>>

GameController <-.  Wapens: <include>
GameController <-. GameModes: <include>

LCD <-. DisplayController: <include>
IrSensor <-. IrReceiver: <include>
IrLed <-. IrSender: <include>
Button <-. ButtonController: <include>
Speaker <-. SoundController: <include>

IrReceiver --> GameController: <channel>
DisplayController <-- GameController: <pool>
IrSender <- GameController: <pool>
GameController <- ButtonController: <flag>
GameController <-- GameTimeController: <flag>
GameController <-- SoundController: <flag>
GameController --> PcProxy




@enduml